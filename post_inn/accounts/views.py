import logging

from django.contrib import auth
from django.contrib.auth.forms import PasswordResetForm
from django.contrib.auth.tokens import default_token_generator
from django.core.exceptions import ValidationError
from django.core.mail import send_mail, BadHeaderError
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render, redirect
from django.template.loader import render_to_string
from django.urls import reverse
from django.contrib import messages
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode
from django.views.generic import UpdateView
from django.contrib.messages.views import SuccessMessageMixin
from django.urls import reverse_lazy
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import user_passes_test
from django.core.exceptions import ObjectDoesNotExist

from accounts.models import User
from accounts.utils.send_mail import send_verify_mail, send_reset_password
from accounts.forms import DivErrorList, UserLoginForm, UserRegisterForm, UserEditForm, UserPasswordEditForm

from post_inn import get_config
from post_inn.utils import logger


def login(request):
    if request.user.is_authenticated:
        return HttpResponseRedirect(reverse('notesapp:notes_list'))

    login_form = UserLoginForm(data=request.POST or None, error_class=DivErrorList)
    _next = request.GET['next'] if 'next' in request.GET.keys() else ''
    context = {'title_page': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥',
               'form': login_form,
               'next': _next,
               'description': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –∑–∞–º–µ—Ç–∫–∞–º.',
               'static_get_param': get_config.GET_CONFIG
               }
    err_message = str(login_form.non_field_errors())

    if request.method == 'POST' and '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' in err_message:
        context['non_verify'] = True
        request.session['user_email'] = request.POST['username']

    elif request.method == 'POST' and login_form.is_valid():
        username = request.POST['username']
        password = request.POST['password']

        user = auth.authenticate(username=username, password=password)
        if user and user.is_active:
            auth.login(request, user)
            logger.info(f'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è {user.email}')

            if 'next' in request.POST.keys():
                return HttpResponseRedirect(request.POST['next'])

            else:
                return HttpResponseRedirect(reverse('notesapp:notes_list'))

    return render(request, 'accounts/register_base.html', context)


def logout(request):
    email = User.get_user_email(request.user.pk)
    auth.logout(request)
    logger.info(f'–í—ã—à–µ–ª {email}')
    return HttpResponseRedirect(reverse('auth:login'))


def register(request):
    if request.user.is_authenticated:
        return HttpResponseRedirect(reverse('notesapp:notes_list'))

    context = {
        'title_page': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'description': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –∑–∞–º–µ—Ç–∫–∞–º —Å –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.',
        'static_get_param': get_config.GET_CONFIG
    }

    if request.method == 'POST':
        register_form = UserRegisterForm(request.POST, request.FILES, error_class=DivErrorList)

        if register_form.is_valid():
            email = request.POST['email']
            user = register_form.save(commit=False)
            user.set_password(register_form.cleaned_data['password1'])

            if send_verify_mail(user) > 0:
                request.session['message'] = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É {email} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                user.save()
                return HttpResponseRedirect(reverse('auth:result'))

            else:
                message = f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ {email} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                logger.info(message)
                request.session['message'] = message
                return HttpResponseRedirect(reverse('auth:result'))

    else:
        register_form = UserRegisterForm()

    context['form'] = register_form
    return render(request, 'accounts/register_base.html', context)


def result(request):
    """–í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

    context = {
        'title_page': '–†–µ–∑—É–ª—å—Ç–∞—Ç',
        'description': '–†–µ–∑—É–ª—å—Ç–∞—Ç',
        'static_get_param': get_config.GET_CONFIG
    }

    try:
        if request.session.get('message'):
            context['message'] = request.session.get('message')
            del request.session['message']

        if request.session.get('title_dialog'):
            context['title_dialog'] = request.session.get('title_dialog')
            del request.session['title_dialog']

        else:
            context['title_dialog'] = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É!'
            messages.success(request, context['title_dialog'])

        if request.user.is_authenticated or not context['message']:
            return HttpResponseRedirect(reverse('notesapp:notes_list'))

        return render(request, 'accounts/register_base.html', context)

    except Exception as err:
        context['title_dialog'] = f'–û—à–∏–±–∫–∞'
        context['message'] = f'Registration error: "{err.args[0]}"'
        context['verify_error'] = True
        messages.success(request, context['title_dialog'])
        logging.error(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {err.args[0]}', exc_info=True)
        return render(request, 'accounts/register_base.html', context)


def verify(request, email, activation_key):
    if request.user.is_authenticated:
        return HttpResponseRedirect(reverse('notesapp:notes_list'))

    context = {'title_page': '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
    try:
        user = User.objects.get(email=email)

        if user.activation_key == activation_key and not user.is_activation_key_expired():
            user.is_active = True
            user.save()
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ—á—Ç–µ')
            # auth.login(request, user, backend='django.contrib.auth.backends.ModelBackend')
            context['title_dialog'] = f'–£—Å–ø–µ—à–Ω–æ!'
            context['message'] = f'–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å {user.email} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üòÄ'
            context['verify_success'] = True
            messages.success(request, context['title_dialog'])

        else:
            context['title_dialog'] = f'–û—Ç–∫–∞–∑–∞–Ω–æ!'
            context['message'] = f'–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ {user.email} —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –±–æ–ª—å—à–µ ' \
                                 f'–Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.'
            context['verify_old_link'] = True
            request.session['user_email'] = user.email
            messages.success(request, context['title_dialog'])
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞')

        return render(request, 'accounts/register_base.html', context)

    except Exception as err:
        context['title_dialog'] = f'–û—Ç–∫–∞–∑–∞–Ω–æ!'
        context['message'] = f'Error: {err.args[0]}'
        context['verify_error'] = True
        messages.success(request, context['title_dialog'])
        logging.error(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {err.args[0]}', exc_info=True)
        return render(request, 'accounts/register_base.html', context)


def verify_update(request):
    if request.user.is_authenticated:
        return HttpResponseRedirect(reverse('notesapp:notes_list'))

    context = {'title_page': '–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞'}
    try:
        email = request.session['user_email']
        user = User.objects.get(email=email)

        if user:
            logger.debug('Old key', user.activation_key)
            logger.debug('Old time', user.activation_key_expires)

            # New key and date
            user.activation_key = User.create_activation_key(user.email)
            user.activation_key_expires = User.create_key_expiration_date()
            user.save()

            del request.session['user_email']
            logger.debug('New key', user.activation_key)
            logger.debug('New time', user.activation_key_expires)

            if send_verify_mail(user) > 0:
                request.session['message'] = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É {email} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                return HttpResponseRedirect(reverse('auth:result'))

            else:
                request.session['message'] = f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ {email} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                return HttpResponseRedirect(reverse('auth:result'))

        return render(request, 'accounts/register_base.html', context)

    except Exception as err:
        context['title_dialog'] = f'–û—Ç–∫–∞–∑–∞–Ω–æ!'
        context['message'] = f'Error: {err.args[0]}'
        context['verify_error'] = True
        messages.success(request, context['title_dialog'])
        logging.error(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  {err.args[0]}', exc_info=True)
        return render(request, 'accounts/register_base.html', context)


class EditUserPasswordUpdateView(SuccessMessageMixin, UpdateView):
    success_message = "–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –ø–∞—Ä–æ–ª—å"
    model = User
    template_name = 'accounts/edit_password.html'

    def get_form(self, form_class=UserPasswordEditForm):
        """–í–µ—Ä–Ω–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏."""
        return form_class(self.request.user.password, error_class=DivErrorList, **self.get_form_kwargs())

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title_page'] = '–ü–∞—Ä–æ–ª—å'
        context['static_get_param'] = get_config.GET_CONFIG
        return context

    def get_success_url(self):
        email = User.get_user_email(user_pk=self.request.user.id)
        logger.info(f' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å')
        return reverse_lazy('notesapp:notes_list')

    def get_object(self):
        return User.objects.get(pk=self.request.user.id)

    @method_decorator(user_passes_test(lambda u: u.is_authenticated, login_url='auth:login'))
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)


class EditUserUpdateView(SuccessMessageMixin, UpdateView):
    success_message = "–ü—Ä–æ—Ñ–∏–ª—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω"
    model = User
    template_name = 'accounts/edit.html'

    def get_form(self, form_class=UserEditForm):
        """–í–µ—Ä–Ω–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏."""
        return form_class(**self.get_form_kwargs())

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title_page'] = '–ü—Ä–æ—Ñ–∏–ª—å'
        context['static_get_param'] = get_config.GET_CONFIG
        return context

    def get_object(self, queryset=None):
        user = User.objects.get(pk=self.request.user.id)
        return user

    def get_success_url(self):
        email = self.object.email
        name = self.object.name
        last_name = self.object.last_name
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å: {name=} {last_name=}')
        return reverse_lazy('notesapp:notes_list')

    @method_decorator(user_passes_test(lambda u: u.is_authenticated, login_url='auth:login'))
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)


# https://www.youtube.com/watch?v=i6wNXuY8lQA
def password_reset_request(request):
    if request.method == "POST":
        password_reset_form = PasswordResetForm(request.POST)

        if password_reset_form.is_valid():
            email = password_reset_form.cleaned_data['email']

            try:
                user = User.objects.get(email=email)  # email –≤ —Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å

            except ObjectDoesNotExist:
                request.session['title_dialog'] = '–ù–µ –≤–µ—Ä–Ω—ã–π email'
                request.session['message'] = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–¥—Ä–µ—Å–æ–º {email} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
                logger.info(f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
                return HttpResponseRedirect(reverse('auth:result'))

            except Exception as err:
                request.session['title_dialog'] = 'Error'
                request.session['message'] = f'{err}'
                logger.error(f'–ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è {email} –≤–æ–∑–Ω–∏–∫–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {err}')
                return HttpResponseRedirect(reverse('auth:result'))

            if send_reset_password(user) > 0:
                request.session['message'] = f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É {email} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è'

            else:
                request.session['title_dialog'] = f'–û—à–∏–±–∫–∞'
                request.session['message'] = f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ {email} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'

            return HttpResponseRedirect(reverse('auth:result'))

    else:
        password_reset_form = PasswordResetForm()

    return render(request=request, template_name="accounts/password_reset.html",
                  context={"password_reset_form": password_reset_form})
